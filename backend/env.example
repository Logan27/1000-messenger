# =============================================================================
# Backend Environment Configuration - Real-Time Messenger Application
# =============================================================================
# Copy this file to .env and update values for your environment
# All values shown are for local development. CHANGE ALL SECRETS IN PRODUCTION!

# -----------------------------------------------------------------------------
# Application Settings
# -----------------------------------------------------------------------------
# Node environment: development, production, or test
NODE_ENV=development

# Server port (default: 3000)
PORT=3000

# -----------------------------------------------------------------------------
# Database - PostgreSQL 15+
# -----------------------------------------------------------------------------
# Primary database connection URL (REQUIRED)
# Format: postgresql://[user]:[password]@[host]:[port]/[database]
DATABASE_URL=postgresql://chatuser:chatpass@localhost:5432/chatapp

# Read replica URL for read-heavy operations (OPTIONAL)
# If not provided, will use DATABASE_URL for all operations
# DATABASE_REPLICA_URL=postgresql://chatuser:chatpass@localhost:5433/chatapp

# -----------------------------------------------------------------------------
# Cache & Pub/Sub - Redis 7+
# -----------------------------------------------------------------------------
# Redis connection URL (REQUIRED)
# Format: redis://[:]password@[host]:[port]
# Used for session storage, real-time pub/sub, and message queues
REDIS_URL=redis://:redispass@localhost:6379

# -----------------------------------------------------------------------------
# Object Storage - S3/MinIO
# -----------------------------------------------------------------------------
# S3/MinIO endpoint URL (REQUIRED)
# For MinIO: http://localhost:9000
# For AWS S3: https://s3.amazonaws.com or https://s3.[region].amazonaws.com
S3_ENDPOINT=http://localhost:9000

# S3/MinIO access credentials (REQUIRED)
S3_ACCESS_KEY=minioadmin
S3_SECRET_KEY=minioadmin

# S3/MinIO bucket name for storing chat images (REQUIRED)
S3_BUCKET=chat-images

# Public URL for accessing stored files (OPTIONAL)
# Used for generating file URLs accessible by clients
# If not provided, will use S3_ENDPOINT
S3_PUBLIC_URL=http://localhost:9000

# AWS Region (REQUIRED for S3, used by MinIO for compatibility)
AWS_REGION=us-east-1

# -----------------------------------------------------------------------------
# Authentication & Security - JWT
# -----------------------------------------------------------------------------
# JWT secret for access tokens (REQUIRED, min 32 characters)
# Access tokens expire in 15 minutes
# GENERATE A STRONG RANDOM SECRET IN PRODUCTION!
JWT_SECRET=your-super-secret-jwt-key-min-32-characters-long

# JWT secret for refresh tokens (REQUIRED, min 32 characters)
# Refresh tokens expire in 7 days
# MUST BE DIFFERENT FROM JWT_SECRET!
# GENERATE A STRONG RANDOM SECRET IN PRODUCTION!
JWT_REFRESH_SECRET=your-super-secret-refresh-key-min-32-characters

# -----------------------------------------------------------------------------
# CORS Configuration
# -----------------------------------------------------------------------------
# Frontend application URL for CORS (REQUIRED)
# Used to allow requests from the frontend application
FRONTEND_URL=http://localhost:5173

# -----------------------------------------------------------------------------
# Monitoring & Logging
# -----------------------------------------------------------------------------
# Enable Prometheus metrics endpoint (default: true)
# Set to false to disable /metrics endpoint
ENABLE_METRICS=true

# Logging level: error, warn, info, http, verbose, debug, silly
# Default: info
# Production recommendation: warn or error
# Development recommendation: debug or info
LOG_LEVEL=info

# =============================================================================
# PRODUCTION DEPLOYMENT CHECKLIST
# =============================================================================
# Before deploying to production:
# 
# 1. Change NODE_ENV to "production"
# 2. Generate strong random secrets for JWT_SECRET and JWT_REFRESH_SECRET
#    - Use: openssl rand -base64 48
#    - Ensure they are different from each other
# 3. Use strong database passwords (not chatpass!)
# 4. Use strong Redis password (not redispass!)
# 5. Use strong MinIO/S3 credentials (not minioadmin!)
# 6. Update FRONTEND_URL to your production domain
# 7. Set LOG_LEVEL to "warn" or "error"
# 8. Configure DATABASE_REPLICA_URL if using read replicas
# 9. For S3: Update S3_ENDPOINT and AWS_REGION appropriately
# 10. Ensure S3_PUBLIC_URL points to your CDN or public S3 endpoint
# 
# Security Notes:
# - Never commit .env files to version control
# - Rotate JWT secrets periodically
# - Use environment-specific secrets management (AWS Secrets Manager, etc.)
# - Enable database SSL/TLS connections in production
# - Use Redis AUTH and SSL/TLS in production
# =============================================================================
