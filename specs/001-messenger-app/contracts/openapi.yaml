openapi: 3.0.3
info:
  title: Real-Time Messenger API
  description: |
    REST API for the Real-Time Messenger Application supporting direct and group messaging,
    real-time communication via WebSocket, image sharing, and full-text search.
    
    ## Authentication
    All endpoints (except registration and login) require JWT authentication.
    Include the access token in the Authorization header: `Bearer <token>`
    
    ## Rate Limiting
    - Authentication: 5 attempts / 15 minutes
    - Messaging: 10 messages / second per user
    - API General: 100 requests / minute per user
    - Image Upload: 10 uploads / minute per user
    
    ## Pagination
    List endpoints use cursor-based pagination for real-time data:
    - `cursor`: Timestamp or ID of last item from previous page
    - `limit`: Number of items to return (default: 50, max: 100)
    
    ## WebSocket Events
    Real-time features use Socket.IO on `/socket.io`:
    - Connect with `auth: { token: <jwt> }`
    - See WebSocket section for event definitions
  version: 1.0.0
  contact:
    name: API Support
    email: support@messenger.example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.messenger.example.com/v1
    description: Production server
  - url: https://staging-api.messenger.example.com/v1
    description: Staging server
  - url: http://localhost:3000/api
    description: Local development server

tags:
  - name: Authentication
    description: User registration and login
  - name: Users
    description: User profile management
  - name: Contacts
    description: Contact management and search
  - name: Chats
    description: Chat creation and management
  - name: Messages
    description: Send and manage messages
  - name: Attachments
    description: Image upload and retrieval
  - name: Search
    description: Message and user search
  - name: Health
    description: Service health checks

paths:
  # ============================================================================
  # Authentication Endpoints
  # ============================================================================
  
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account with username and password
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - passwordConfirm
              properties:
                username:
                  type: string
                  pattern: '^[a-zA-Z0-9_]{3,50}$'
                  minLength: 3
                  maxLength: 50
                  example: john_doe
                password:
                  type: string
                  minLength: 8
                  maxLength: 128
                  format: password
                  example: SecurePass123!
                passwordConfirm:
                  type: string
                  minLength: 8
                  maxLength: 128
                  format: password
                  example: SecurePass123!
                displayName:
                  type: string
                  maxLength: 100
                  example: John Doe
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT access token (15 min expiration)
                  refreshToken:
                    type: string
                    description: JWT refresh token (7 days expiration)
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          description: Username already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  code: CONFLICT
                  message: Username already exists
                  field: username

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate with username and password
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: john_doe
                password:
                  type: string
                  format: password
                  example: SecurePass123!
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  code: UNAUTHORIZED
                  message: Invalid username or password
        '429':
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  code: RATE_LIMIT_EXCEEDED
                  message: Too many login attempts. Try again in 15 minutes.
                  retryAfter: 900

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get new access token using refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: Valid refresh token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidate current session and tokens
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ============================================================================
  # User Endpoints
  # ============================================================================

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Retrieve authenticated user's profile information
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Users
      summary: Update current user profile
      description: Update display name and status
      operationId: updateCurrentUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  maxLength: 100
                  example: John Smith
                status:
                  type: string
                  enum: [online, offline, away]
                  example: away
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/me/avatar:
    patch:
      tags:
        - Users
      summary: Update user avatar
      description: Upload new profile picture
      operationId: updateAvatar
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - avatar
              properties:
                avatar:
                  type: string
                  format: binary
                  description: Image file (JPEG, PNG, WebP, max 10MB)
      responses:
        '200':
          description: Avatar updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatarUrl:
                    type: string
                    format: uri
                    example: https://cdn.example.com/avatars/user-123.jpg
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve public profile of another user
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/search:
    get:
      tags:
        - Users
      summary: Search users by username
      description: Find users by partial username match (case-insensitive)
      operationId: searchUsers
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query (minimum 2 characters)
          schema:
            type: string
            minLength: 2
            example: john
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                    example: 5
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ============================================================================
  # Contact Endpoints
  # ============================================================================

  /contacts:
    get:
      tags:
        - Contacts
      summary: Get contact list
      description: Retrieve all accepted contacts with online status
      operationId: getContacts
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by contact status
          schema:
            type: string
            enum: [accepted, pending, blocked]
            default: accepted
      responses:
        '200':
          description: Contact list retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  contacts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Contacts
      summary: Send contact request
      description: Send a contact request to another user
      operationId: sendContactRequest
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  format: uuid
                  description: User ID to add as contact
      responses:
        '201':
          description: Contact request sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Contact request already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contacts/{contactId}:
    delete:
      tags:
        - Contacts
      summary: Remove contact
      description: Remove a contact from your contact list
      operationId: removeContact
      security:
        - bearerAuth: []
      parameters:
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Contact removed successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /contacts/{contactId}/accept:
    put:
      tags:
        - Contacts
      summary: Accept contact request
      description: Accept a pending contact request
      operationId: acceptContactRequest
      security:
        - bearerAuth: []
      parameters:
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Contact request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /contacts/{contactId}/reject:
    put:
      tags:
        - Contacts
      summary: Reject contact request
      description: Reject a pending contact request
      operationId: rejectContactRequest
      security:
        - bearerAuth: []
      parameters:
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Contact request rejected
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /contacts/pending:
    get:
      tags:
        - Contacts
      summary: Get pending contact requests
      description: Retrieve all incoming contact requests
      operationId: getPendingRequests
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Pending requests retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  requests:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ============================================================================
  # Chat Endpoints
  # ============================================================================

  /chats:
    get:
      tags:
        - Chats
      summary: Get user's chats
      description: Retrieve all chats for the current user (direct and groups)
      operationId: getChats
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          description: Filter by chat type
          schema:
            type: string
            enum: [direct, group]
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: cursor
          in: query
          description: Cursor for pagination (last_message_at timestamp)
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Chat list retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  chats:
                    type: array
                    items:
                      $ref: '#/components/schemas/Chat'
                  nextCursor:
                    type: string
                    format: date-time
                  hasMore:
                    type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'

  /chats/{chatId}:
    get:
      tags:
        - Chats
      summary: Get chat by ID
      description: Retrieve chat details including participants
      operationId: getChatById
      security:
        - bearerAuth: []
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Chat retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatDetail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Chats
      summary: Update chat
      description: Update chat name and avatar (group owner only)
      operationId: updateChat
      security:
        - bearerAuth: []
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 100
                  example: Project Team
                avatarUrl:
                  type: string
                  format: uri
      responses:
        '200':
          description: Chat updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Chats
      summary: Delete chat
      description: Delete a group chat (owner only) or leave a group
      operationId: deleteChat
      security:
        - bearerAuth: []
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Chat deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /chats/direct:
    post:
      tags:
        - Chats
      summary: Create or get direct chat
      description: Create a new direct chat with a contact or return existing one
      operationId: createDirectChat
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  format: uuid
                  description: Contact user ID
      responses:
        '200':
          description: Existing direct chat returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatDetail'
        '201':
          description: New direct chat created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatDetail'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Not a contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /chats/group:
    post:
      tags:
        - Chats
      summary: Create group chat
      description: Create a new group chat with multiple participants
      operationId: createGroupChat
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - participantIds
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: Project Team
                participantIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  minItems: 1
                  maxItems: 299
                  description: User IDs to add (max 299, creator is automatically added)
                avatarUrl:
                  type: string
                  format: uri
      responses:
        '201':
          description: Group chat created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatDetail'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /chats/{chatId}/participants:
    post:
      tags:
        - Chats
      summary: Add participant to group
      description: Add a new participant to group chat (owner/admin only)
      operationId: addParticipant
      security:
        - bearerAuth: []
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  format: uuid
                role:
                  type: string
                  enum: [member, admin]
                  default: member
      responses:
        '201':
          description: Participant added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatParticipant'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: User already in group or group is full
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /chats/{chatId}/participants/{userId}:
    delete:
      tags:
        - Chats
      summary: Remove participant from group
      description: Remove a participant from group chat (owner/admin only)
      operationId: removeParticipant
      security:
        - bearerAuth: []
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Participant removed successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /chats/{chatId}/leave:
    post:
      tags:
        - Chats
      summary: Leave group chat
      description: Remove yourself from a group chat
      operationId: leaveGroup
      security:
        - bearerAuth: []
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Left group successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /chats/slug/{slug}:
    get:
      tags:
        - Chats
      summary: Get chat by slug
      description: Retrieve chat by URL-friendly slug
      operationId: getChatBySlug
      security:
        - bearerAuth: []
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          example: project-team
      responses:
        '200':
          description: Chat retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatDetail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # ============================================================================
  # Message Endpoints
  # ============================================================================

  /chats/{chatId}/messages:
    get:
      tags:
        - Messages
      summary: Get chat messages
      description: Retrieve messages from a chat with pagination
      operationId: getMessages
      security:
        - bearerAuth: []
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: cursor
          in: query
          description: Message creation timestamp for pagination
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Messages retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  nextCursor:
                    type: string
                    format: date-time
                  hasMore:
                    type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - Messages
      summary: Send message
      description: Send a new message to a chat
      operationId: sendMessage
      security:
        - bearerAuth: []
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  minLength: 1
                  maxLength: 10000
                  example: Hello everyone!
                contentType:
                  type: string
                  enum: [text, image]
                  default: text
                metadata:
                  type: object
                  description: Additional message metadata (formatting, attachments)
                  properties:
                    formatting:
                      type: object
                      properties:
                        bold:
                          type: array
                          items:
                            type: array
                            items:
                              type: integer
                            minItems: 2
                            maxItems: 2
                        italic:
                          type: array
                          items:
                            type: array
                            items:
                              type: integer
                            minItems: 2
                            maxItems: 2
                    attachments:
                      type: array
                      items:
                        type: string
                        format: uuid
                      maxItems: 5
                replyToId:
                  type: string
                  format: uuid
                  description: ID of message being replied to
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /messages/{messageId}:
    put:
      tags:
        - Messages
      summary: Edit message
      description: Edit a previously sent message (sender only)
      operationId: editMessage
      security:
        - bearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  minLength: 1
                  maxLength: 10000
      responses:
        '200':
          description: Message edited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Messages
      summary: Delete message
      description: Delete a message (sender only)
      operationId: deleteMessage
      security:
        - bearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Message deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /messages/{messageId}/reactions:
    post:
      tags:
        - Messages
      summary: Add reaction to message
      description: Add an emoji reaction to a message
      operationId: addReaction
      security:
        - bearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - emoji
              properties:
                emoji:
                  type: string
                  maxLength: 10
                  example: 👍
      responses:
        '201':
          description: Reaction added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageReaction'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Reaction already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /messages/{messageId}/reactions/{reactionId}:
    delete:
      tags:
        - Messages
      summary: Remove reaction
      description: Remove your emoji reaction from a message
      operationId: removeReaction
      security:
        - bearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: reactionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Reaction removed successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /messages/{messageId}/read:
    post:
      tags:
        - Messages
      summary: Mark message as read
      description: Mark a message as read by the current user
      operationId: markMessageRead
      security:
        - bearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Message marked as read
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # ============================================================================
  # Attachment Endpoints
  # ============================================================================

  /attachments/upload:
    post:
      tags:
        - Attachments
      summary: Upload image
      description: Upload one or more images (max 5 per request, 10MB each)
      operationId: uploadImage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - images
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  minItems: 1
                  maxItems: 5
                  description: Image files (JPEG, PNG, GIF, WebP)
      responses:
        '201':
          description: Images uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  attachments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Attachment'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Upload rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /attachments/{attachmentId}:
    get:
      tags:
        - Attachments
      summary: Get attachment
      description: Retrieve attachment metadata and signed URLs
      operationId: getAttachment
      security:
        - bearerAuth: []
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Attachment retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Attachments
      summary: Delete attachment
      description: Delete an attachment (owner only, before message is sent)
      operationId: deleteAttachment
      security:
        - bearerAuth: []
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Attachment deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # ============================================================================
  # Search Endpoints
  # ============================================================================

  /messages/search:
    get:
      tags:
        - Search
      summary: Search messages
      description: Full-text search across all accessible messages
      operationId: searchMessages
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query (minimum 2 characters)
          schema:
            type: string
            minLength: 2
            example: project meeting
        - name: chatId
          in: query
          description: Limit search to specific chat
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/MessageSearchResult'
                  total:
                    type: integer
                    example: 42
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ============================================================================
  # Health Endpoints
  # ============================================================================

  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check service health and dependencies
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok, degraded]
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: 1.0.0
                  services:
                    type: object
                    properties:
                      database:
                        type: string
                        enum: [ok, error]
                      redis:
                        type: string
                        enum: [ok, error]
                      storage:
                        type: string
                        enum: [ok, error]
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [error]
                  services:
                    type: object

# ==============================================================================
# Components
# ==============================================================================

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token (15-minute expiration)

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          example: john_doe
        displayName:
          type: string
          example: John Doe
        avatarUrl:
          type: string
          format: uri
          nullable: true
        status:
          type: string
          enum: [online, offline, away]
        lastSeen:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time

    Contact:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/User'
        status:
          type: string
          enum: [pending, accepted, blocked]
        requestedBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        acceptedAt:
          type: string
          format: date-time
          nullable: true

    Chat:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [direct, group]
        name:
          type: string
          nullable: true
        slug:
          type: string
          nullable: true
        avatarUrl:
          type: string
          format: uri
          nullable: true
        lastMessage:
          $ref: '#/components/schemas/MessagePreview'
        unreadCount:
          type: integer
          minimum: 0
        participantCount:
          type: integer
          minimum: 2
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastMessageAt:
          type: string
          format: date-time
          nullable: true

    ChatDetail:
      allOf:
        - $ref: '#/components/schemas/Chat'
        - type: object
          properties:
            participants:
              type: array
              items:
                $ref: '#/components/schemas/ChatParticipant'
            ownerId:
              type: string
              format: uuid
              nullable: true

    ChatParticipant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/User'
        role:
          type: string
          enum: [owner, admin, member]
        joinedAt:
          type: string
          format: date-time
        leftAt:
          type: string
          format: date-time
          nullable: true

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        chatId:
          type: string
          format: uuid
        sender:
          $ref: '#/components/schemas/User'
        content:
          type: string
        contentType:
          type: string
          enum: [text, image, system]
        metadata:
          type: object
        replyTo:
          $ref: '#/components/schemas/MessagePreview'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/MessageReaction'
        deliveryStatus:
          type: object
          properties:
            status:
              type: string
              enum: [sent, delivered, read]
            deliveredCount:
              type: integer
              description: Group chats only
            readCount:
              type: integer
              description: Group chats only
        isEdited:
          type: boolean
        editedAt:
          type: string
          format: date-time
          nullable: true
        isDeleted:
          type: boolean
        createdAt:
          type: string
          format: date-time

    MessagePreview:
      type: object
      properties:
        id:
          type: string
          format: uuid
        senderName:
          type: string
        content:
          type: string
        contentType:
          type: string
          enum: [text, image, system]
        createdAt:
          type: string
          format: date-time

    MessageSearchResult:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: object
          properties:
            chatName:
              type: string
            highlights:
              type: array
              items:
                type: string
              description: Content snippets with search term highlighted

    Attachment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        fileName:
          type: string
        fileType:
          type: string
          enum: [image/jpeg, image/png, image/gif, image/webp]
        fileSize:
          type: integer
          description: File size in bytes
        url:
          type: string
          format: uri
          description: Signed URL for original image (1-hour expiration)
        thumbnailUrl:
          type: string
          format: uri
          description: Signed URL for thumbnail (1-hour expiration)
        width:
          type: integer
          nullable: true
        height:
          type: integer
          nullable: true
        createdAt:
          type: string
          format: date-time

    MessageReaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        emoji:
          type: string
        user:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: VALIDATION_ERROR
            message:
              type: string
              example: Invalid input data
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string
            requestId:
              type: string
              format: uuid

  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: VALIDATION_ERROR
              message: Invalid input data
              details:
                - field: username
                  message: Username must be 3-50 characters
              requestId: 550e8400-e29b-41d4-a716-446655440000

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: UNAUTHORIZED
              message: Authentication required

    Forbidden:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: FORBIDDEN
              message: You do not have permission to access this resource

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: NOT_FOUND
              message: Resource not found

security:
  - bearerAuth: []
